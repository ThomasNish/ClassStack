{"name":"Classstack","tagline":"Training class management stack for Xen Cloud Platform","body":"Classstack is an XCP/Xenserver management stack for classroom environments. It's purpose is to manage groups of virtual machines by class. Input data comes from Instructor Briefcase formatted rosters. Instructor Briefcase doesn't export so a copy and paste of the web screen is then saved into a text file in the IBCfiles directory. Use mkroster.sh to convert the Instructor Briefcase file into a classtack roster file in the Rosters directory. \r\n\r\nMy Setup\r\n========\r\n\r\n1. 8 core iSCSI SAN host with 1 Hard disk and 3 Solid State disks with 3 network cards\r\n2. 6 core host with no local storage repository with 2 network cards\r\n3. 6 core host with no local storage repository with 2 network cards\r\n4. 6 core host with no local storage repository with 2 network cards\r\n5. A VM named classserver that handles DHCP/DNS, web services (Moodle) and a CentOS software mirror. The DHCP/DNS services are provided by dnsmasq. This is required with classstack currently as classstack uses /etc/hosts and /etc/ethers to configure DHCP/DNS for all student VMs.\r\n\r\nMachine #1 acts as the iSCSI SAN for all Storage Repositories and the gateway to the outside world. One network card is plugged into the WAN and the other into an internal network switch for the SAN network. The third network card is plugged into a second network switch for the internal class network. The firewall/NAT is provided by iptables and forwards traffic to the first network card and the internal class network.\r\n\r\nMachines #2,3, and 4 are all in the same Pool. These hosts have their default storage repository set to the hard disks in machine #1. The SSD disks are configured as Storage Repositories named iSCSI-SSD_0, iSCSI-SDD_1 and iSCSI-SSD_2.\r\n\r\n\r\nRequirements\r\n============\r\n\r\n1. XCP/Xenserver host\r\n2. A default Storage Repository on any type of disk\r\n2. Storage Repository named iSCSI-SSD_${x} where ${x} is a number 0 or greater (starting from 0). This is for extra disks)\r\n3. Xenapi Admin Tools\r\n4. Instructor Briefcase html screengrab (copy/paste)\r\n5. A golden VM image named baseimage\r\n\r\n\r\n\r\n\r\nInstall\r\n=======\r\nGit clone both classstack and xenapi-admin-tools. This can be done on your XCP host directly by installing git on XCP/Xenserver - http://grantmcwilliams.com/item/652-install-git-on-xcp-host.\r\n```\r\ngit clone https://github.com/Xenapi-Admin-Project/xenapi-admin-tools.git\r\ngit clone https://github.com/grantmcwilliams/classstack.git\r\n```\r\n\r\nOnce you've cloned xaptools and classstack you'll need to copy xaptools.lib into the classstack directory and add that directory to your system $PATH. If you add the files to /root/bin they'll already be in your $PATH. I also like symbollically linking vm.sh to vm.\r\n\r\nThe directory structure should look like this \r\n```\r\ncd /root/bin\r\n[root@cloud0 bin]# ls\r\nIBCfiles  mkroster.sh  Rosters  test.sh  vm.sh  wipevdis.sh  wipevm.sh  xaptools.lib\r\nln -s vm.sh vm\r\n```\r\n\r\nThis allows me to just run vm instead of having to type vm.sh.\r\n\r\nCofiguring multiple poolhosts\r\n-----------------------------\r\n\r\nTo configure multiple poolhosts create the following directory - $HOME/.XECONFIGS. vm.sh will also create the directory the first time it's run and set the permissions appropriately. Inside that directory create ONE file per host with the following information in it. \r\n\r\n```\r\nLABEL=\"cloudhost1\"\r\nPOOLMASTER=\"cloud1.acs.edcc.edu\"\r\nPORT=\"443\"\r\nUSERNAME=\"root\"\r\nPASSWORD=\"password\"\r\n```\r\n\r\nThe LABEL is freeform so you can name the config anything you want. When you list configs with vm.sh -s list both the LABEL and the POOLMASTER will be displayed. Unless you're using a custom USER or PORT leave these as they are. Change PASSWORD to match your POOLMASTER passsword. This file will be readable only by the owner of the file. This is enforced by classstack.\r\n\r\nVM Help\r\n=======\r\n\r\nOutput of vm.sh help \r\n```\r\n  Usage: vm [options] <subcommand>\r\n\r\n\tVersion: \t0.2\r\n\r\n\tOptions:\r\n\t-d\t\tturn on shell debugging\r\n\t-h\t\tthis help text\r\n\t-w\t\tnumber of whitespaces between columns\r\n\t-s <host>\tremote poolmaster host\r\n\t-s list\t\tlist stored poolmaster configs\r\n\t-p <password>\tremote poolmaster password\r\n\r\n\tSubcommands:\r\n\tlistclass \tlist members of a class\r\n\tinfoclass \tshow information about students\r\n\tclassrun \trun command on all VMs in a class\r\n\tcreatevm\tcreate a new student VM\r\n\tcreateclass\tcreate VMs for all students in a class\r\n\tcreateroster\tconvert Instructor Briefcase screen to CSV\r\n\tstartvm\t \tstarts the VM for a student\r\n\tstartclass \tstarts the VMs for an entire class\r\n\tstopvm \t\tstops the VM for a student\r\n\tstopclass \tstops the VMs for a class\r\n\tdeletevm\tdeletes the VM for a student\r\n\tdeleteclass\tdeletes all VMs for an entire class\r\n\trecreatevm \tshutdown, delete, create then start a vm\r\n```\t\r\n\r\nCreate a Class\r\n==============\r\n\r\nCreate a class by opening up the class roster in Instructor Briefcase. Copy and paste the ENTIRE webpage (top left to bottom right) and paste it into a text file on the machine running classtack.\r\n\r\nThe format of the resulting file should look like this. \r\n\r\n```\r\n[root@cloud0 IBCfiles]# cat CS125.txt \r\nClass Roster\r\nQUARTER\tITEM\tCOURSE\tSECTION\tTITLE\tINSTRUCTOR\r\nWinter 2013\t3057\tCS 125\tSA\tLINUX/UNIX I\tGRANT MCWILLIAMS\r\n\r\nBUILDING\r\nROOM\tCREDIT\tSTART\r\nTIME\tEND\r\nTIME\tDAYS\tSTART\r\nTENTH\r\nDAY\tCOUNT\r\nMETH\tSECT\r\nSTAT\r\nALD 0105\t 5.0\t06:00pm\t07:40pm\tTTh\t01/02/13\t01/15/13\t \t \r\n\r\n \tSID\tSTUDENT`S NAME\tGRADE\tDAY PHONE\tEVENING PHONE\r\n1\t111-11-1111\tBLOW JOE\t \t425 111-1111\t425 111-1111\r\n\r\nTotal students\t0001\tTotal students excluding withdrawals\t0001\r\n```\r\n\r\nIn my example below I've named the file CS126.txt. Create a classtack roster by running vm.sh createroster <IBC file>.\r\n\r\n```\r\nvm.sh createroster IBCfiles/CS126.txt\r\n```\r\n\r\nNow that you have a classstack roster file in CSV format you can run some commands on it like vm.sh listclass. \r\n\r\nCreate your class VMs by using the vm.sh createclass command. \r\n```\r\nvm.sh createclass\r\n```\r\n\r\nIf everything is OK it will clone the VM image named baseimage and create a second virtual network interface in each VM, then create 4 virtual disk images for each VM assigning each disk image in an iSCSI-SSD storage repository alternately.\r\n\r\nStart a class using the vm.sh startclass command\r\n```\r\nvm.sh startclass\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}